* Ractors are Ruby's goroutines

* System threads - they are smart

* Goroutines - they are genius

* Ruby before 3.0

   It was limited to one CPU core only

* Introducing GVL!

   a.k.a. Global Virtual machine Lock (GVL)
   a.k.a. Global Interpreter Lock (GIL)
   a.k.a. /(coming in a few slides)/

* Two questions

   - [ ] Why did the GVL and using a single core not prevent the race condition?

   - [ ] Why do we need GVL at all?!

* Parallelism ≠ Concurrency

* Parallelism ≠ Concurrency


   *First thread*: =0, 1, 2, 3, ... , 99=  /counting numbers/

   *Second thread*: ~A, B, C, D, ..., Z~   /counting letters/

* Parallelism ≠ Concurrency

   Parallel: ❌
   Concurrent: ❌

   +---------------------------------------------------------------+
   |             |                                                 |
   | CPU Core #0 | 0, 1, 2, ..., 97, 98, 99, A, B, ..., X, Y, Z    |
   |             |                                                 |
   +---------------------------------------------------------------+
   |             |                                                 |
   | CPU Core #1 |                                                 |
   |             |                                                 |
   +---------------------------------------------------------------+


   |========================== Timeline ===========================>


* Parallelism ≠ Concurrency

   Parallel: ✔️
   Concurrent: ✔️

   +---------------------------------------------------------------+
   |             |                                                 |
   | CPU Core #0 | 0, 1, 2, 3, 4, 5, ..., 97, 98, 99               |
   |             |                                                 |
   +---------------------------------------------------------------+
   |             |                                                 |
   | CPU Core #1 | A, B, C, D, E, F, ..., X, Y, Z                  |
   |             |                                                 |
   +---------------------------------------------------------------+


   |========================== Timeline ===========================>

* Parallelism ≠ Concurrency

   Parallel: ❌
   Concurrent: ✔️

   +---------------------------------------------------------------+
   |             |                                                 |
   | CPU Core #0 | 0, A, 1, 2, B, C, ..., X, 25, 26, Y, Z, ..., 99 |
   |             |                                                 |
   +---------------------------------------------------------------+
   |             |                                                 |
   | CPU Core #1 |                                                 |
   |             |                                                 |
   +---------------------------------------------------------------+


   |========================== Timeline ===========================>


* Two questions (1/2)

   - [x] +Why did the GVL and using a single core not prevent the race condition?+
     *Answer*: Because threads are concurrent despite not being parallel.

   - [ ] Why do we need GVL at all?!


* Two questions (2/2)

   - [x] +Why did the GVL and using a single core not prevent the race condition?+
     *Answer*: Because threads are concurrent despite not being parallel.

   - [x] +Why do we need GVL at all?!+
     *Answer*: Because it protects Ruby interpreter's internal parts.

* +Global+ *Great* Virtual machine Lock

   former Global Virtual machine Lock (GVL)
   former Global Interpreter Lock (GIL)

   /Note: GVLs are still present, one per Ractor/

* Ruby 3.0: Ractors were introduced (2020)


#+BEGIN_SRC RUBY

   Ractor.new { run_stuff_in_parallel }
   Ractor.new { run_more_stuff_in_parallel }

#+END_SRC

   But they still suffered from the system threads' overhead

* Ruby 3.3: M:M vs M:N (2023)

* How to contact me (and why)
